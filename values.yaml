# Default values for flask-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: mayezra/my_flask_api
  # This sets the pull policy for images.
  tag: "main"
  pullPolicy: Always
imagePullSecrets:
  - name: regcred 


postgresdb:
  auth:
    existingSecret: flask-app-postgresql
    username: postgres # Tells PostgreSQL to match your secret
    database: students
    secretKeys:
      adminPasswordKey: postgres-password
  persistence:
    enabled: true
    storageClass: "standard"
    size: 8Gi
  image:
    pullSecrets:
      - name: regcred
redisdb:
  auth:
    enabled: false 
    persistence:
      enabled: true
      storageClass: "standard"
      size: 2Gi
env:
  config:
    POSTGRES_USER: "postgres"
    POSTGRES_DB: "students"
    POSTGRES_HOST: "flask-app-postgresql"
    POSTGRES_PORT: "5432"
    CACHE_REDIS_HOST: "flask-app-redis-master"
    CACHE_REDIS_PORT: "6379"
    CACHE_REDIS_DB: "0"

  secret:
    POSTGRES_PASSWORD:
      name: flask-app-postgresql
      key: postgres-password
    CACHE_REDIS_PASSWORD:
      name: flask-app-redis
      key: redis-password

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
#podAnnotations: {}
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5000"     # Match your app containerPort
  prometheus.io/path: "/metrics"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: flask-app.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

resources:
  limits:
    memory: 256Mi
    cpu: 300m
  requests:
    memory: 128Mi
    cpu: 100m

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 5000
  initialDelaySeconds: 20
  timeoutSeconds: 3
  periodSeconds: 10
  failureThreshold: 10
    
readinessProbe:
  httpGet:
    path: /
    port: 5000

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

